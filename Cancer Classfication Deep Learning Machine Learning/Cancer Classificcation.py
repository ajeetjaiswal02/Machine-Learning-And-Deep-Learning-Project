# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1whjrbrxgwoyiatO7mGTjqeuFUb0qp2yH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('cancer_classification.csv')

df.head(2)

"""LETS DO SOME EPLOTIRARY ANALYSIS"""

sns.countplot(x='benign_0__mal_1',data=df)

df.corr()['benign_0__mal_1'][:-1].sort_values().plot(kind='bar')

X = df.drop('benign_0__mal_1',axis=1).values
y = df['benign_0__mal_1'].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense,Dropout

model = Sequential()

model.add(Dense(30,activation='relu'))


model.add(Dense(15,activation='relu'))

#BINARY CLASSIFICATION PROBLEM WE WANT TO LAST FUCTION AS SIGMOID
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam')

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test))

losses = pd.DataFrame(model.history.history)

losses.plot()

model = Sequential()

model.add(Dense(30,activation='relu'))


model.add(Dense(15,activation='relu'))

#BINARY CLASSIFICATION PROBLEM WE WANT TO LAST FUCTION AS SIGMOID
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam')

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=25)

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test),callbacks=[early_stop])

model.loss = pd.DataFrame(model.history.history)
model.loss.plot()

model = Sequential()

model.add(Dense(30,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(15,activation='relu'))
model.add(Dropout(0.5))

#BINARY CLASSIFICATION PROBLEM WE WANT TO LAST FUCTION AS SIGMOID
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam')

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test),callbacks=[early_stop])

model_loss = pd.DataFrame(model.history.history)

model_loss.plot()

prediction = model.predict_classes(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,prediction))
print('\n')
print(confusion_matrix(y_test,prediction))

