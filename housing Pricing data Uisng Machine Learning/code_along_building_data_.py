# -*- coding: utf-8 -*-
"""CODE ALONG BUILDING DATA .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfRo3EvjJOL2Kg3FjY97CSEU61yhnMBH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv('kc_house_data.csv')

#df.isnull().sum()

plt.figure(figsize=(10,6))
sns.distplot(df['price'])

sns.countplot(df['bedrooms'])

df.corr()['price'].sort_values()

sns.scatterplot(x='price',y='sqft_living',data=df)

sns.boxplot(x='bedrooms',y='price',data=df)

df.columns

sns.scatterplot(x='price',y='long',data=df)

sns.scatterplot(x='price',y='lat',data=df)

sns.scatterplot(x='long',y='lat',data=df,hue='price')

df.sort_values('price',ascending=False).head(20)

len(df)*0.01

non_top_1_prec = df.sort_values('price',ascending=False).iloc[216:]

plt.figure(figsize=(10,6))
sns.scatterplot(x='long',y='lat',edgecolor=None,data=non_top_1_prec,hue='price',palette='RdYlGn')

sns.boxplot(x='waterfront',y='price',data=df)

df.drop('id',axis=1)

df['date'] = pd.to_datetime(df['date'])

df['month'] = df['date'].apply(lambda date: date.month)
df['year'] = df['date'].apply(lambda date: date.year)

df.head(3)

sns.boxplot(x='month',y='price',data=df)

df.groupby('year').mean()['price']

df.drop('date',inplace=True,axis=1)

df.head(2)

#df['zipcode'].value_counts()

df = df.drop('zipcode',axis=1)

df.head()

df['yr_renovated'].value_counts()

df['sqft_basement'].value_counts()

X = df.drop('price',axis=1).values
y = df['price'].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

X_train.shape

model = Sequential()

model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))

model.add(Dense(1))

model.compile(optimizer='adam',loss='mse')

model.fit(x=X_train,y=y_train,validation_data=(X_test,y_test),batch_size=128,epochs=400)

losses = pd.DataFrame(model.history.history)

losses.plot()

from sklearn.metrics import mean_absolute_error,mean_squared_error,explained_variance_score

prediction = model.predict(X_test)

mean_squared_error(y_test,prediction)

mean_absolute_error(y_test,prediction)

df['price'].describe()

explained_variance_score(y_test,prediction)

plt.scatter(y_test,prediction)
plt.plot(y_test,y_test,'r')

single_house = df.drop('price',axis=1).iloc[0]

single_house.values

single_house = scaler.transform(single_house.values.reshape(-1,20))

model.predict(single_house)

df['price']



"""HERE we can see that the model has done very bad  job to give me the required Result"""

